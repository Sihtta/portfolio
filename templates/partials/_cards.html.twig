{% block style_cards %}
	<style>
		.hover-card {
			transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
			border-radius: 20px;
			overflow: hidden;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		}

		.hover-card:hover {
			background-color: #f8f9fa;
			transform: scale(1.02);
			box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
			cursor: pointer;
		}

		.card-footer {
			border-top: 1px solid #dee2e6;
		}

		.js-like,
		.js-comment {
			text-decoration: none;
			font-size: 1.2rem;
			display: inline-flex;
			align-items: center;
			gap: 4px;
			color: #6c757d;
			transition: color 0.3s ease;
		}

		.js-like,
		.js-like i {
			color: #dc3545;
			transition: transform 0.3s ease, color 0.3s ease;
		}

		.js-like.liked i {
			color: #dc3545;
			transform: scale(1.2);
		}

		.js-like:hover span.js-likes {
			color: #dc3545;
		}

		.share-icon {
			cursor: pointer;
			color: #007bff;
			font-size: 1.5rem;
			margin-left: 15px;
			transition: color 0.3s ease;
		}

		.share-icon:hover {
			color: #0056b3;
		}

		.copied-message {
			color: green;
			font-size: 0.9rem;
			display: none;
		}

		.copied-message.active {
			display: inline-block;
		}

		.modal-dialog {
			max-width: 70%;
			width: auto;
			height: auto;
			overflow: hidden;
		}

		@media(max-width: 768px) {
			.modal-dialog {
				max-width: 90%;
			}

			.modal-body {
				padding: 10px;
			}
		}

		.modal-body {
			display: flex;
			max-height: 550px;
			overflow-y: auto;
		}

		@media(max-width: 768px) {
			.modal-body .col-md-6:first-child {
				padding-top: 30px;
			}
		}


		.modal-body .col-md-6:first-child {
			position: relative;
			height: auto;
			overflow: hidden;
		}


		.modal-body .col-md-6:last-child {
			overflow-y: auto;
			max-height: 500px;
		}


		.btn-close {
			position: absolute;
			top: 10px;
			right: 10px;
			border: none;
			cursor: pointer;
		}

		@media(max-width: 768px) {
			.modal-dialog {
				position: relative !important;
			}

			.btn-close {
				position: absolute !important;
				top: 0 !important;
				right: 0 !important;
				padding: 10px !important;
				z-index: 1050 !important;
			}
		}

		.btn-close:hover {
			background-color: transparent;
		}

		.modal-dialog-centered {
			display: flex;
			align-items: center;
			min-height: calc(90vh - 1rem);
		}

		.modal-content {
			border-radius: 15px;
			overflow: hidden;
		}

		@media(max-width: 768px) {
			.modal-body {
				display: block;
			}

			.modal-body .col-md-6 {
				width: 100%;
			}

			.modal-body .col-md-6:first-child {
				margin-bottom: 20px;
			}

			.modal-body .col-md-6:last-child {
				overflow-y: auto;
				max-height: none;
			}
		}
	</style>
{% endblock %}


{% block content_cards %}
	<div class="row row-cols-1 row-cols-md-3 g-4 mx-4">
		{% for creation in creations %}
			<div class="col">
				<div class="card h-100 hover-card" style="border-radius: 30px;">
					<img src="/images/{{ creation.image[0] }}" class="card-img-top" style="border-radius: 30px 30px 0 0;" alt="{{ creation.name }}" data-bs-toggle="modal" data-bs-target="#creationModal-{{ creation.id }}">
					<div class="card-body">
						<h5 class="card-title">{{ creation.name }}</h5>
					</div>
					<div class="card-footer text-end">
						<div class="like share">
							<a href="{{ path('creation.like', { 'id': creation.id }) }}" class="btn btn-link js-like">
								{% if app.user and creation.isLikedByUser(app.user) %}
									<i class="fas fa-heart liked"></i>
								{% else %}
									<i class="far fa-heart"></i>
								{% endif %}
								<span class="js-likes">{{ creation.likes | length }}</span>
							</a>
							<a href="#" class="btn btn-link js-comment" data-bs-toggle="modal" data-bs-target="#creationModal-{{ creation.id }}">
								<i class="fas fa-comments"></i>
								<span class="js-comments">{{ creation.comments | length }}</span>
							</a>
							<span class="share-icon" data-share-url="{{ path('creation_show', {'id': creation.id}) }}" title="Partager">
								<i class="fas fa-share"></i>
							</span>
							<span class="copied-message">Lien copié !</span>
						</div>
					</div>
				</div>
			</div>

			<div class="modal fade" id="creationModal-{{ creation.id }}" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
				<div class="modal-dialog modal-dialog-centered modal-lg" style="border-radius: 15px; overflow: hidden;">
					<div class="modal-content">
						<div class="modal-body">
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="right: 40px;"></button>
							<div class="row">
								<div class="col-md-6 col-12">
									{% block carroussel %}
										{% include "partials/_carroussel.html.twig" %}
									{% endblock %}
								</div>

								<div class="col-md-6">
									<div class="content-section">
										<h5 class="modal-title">{{ creation.name }}</h5>
										<p>{{ creation.description }}</p>
										<p>
											<strong>Outils utilisés :</strong>
										</p>
										<ul>
											{% for tool in creation.Tool %}
												{% if tool.reference != null %}
													<li>
														<a href="{{ tool.reference }}">
															{{ tool.name }}</a>
														{% if tool.description != null %}
															-
															{{ tool.description }}
														{% endif %}
													</li>
												{% else %}
													<li>
														{{ tool.name }}
														{% if tool.description != null %}
															-
															{{ tool.description }}
														{% endif %}
													</li>
												{% endif %}
											{% endfor %}
										</ul>
										<p>
											<strong>Catégories :</strong>
										</p>
										<ul>
											{% for category in creation.category %}
												<li>{{ category.name }}</li>
											{% endfor %}
										</ul>
										<h3>Commentaires :</h3>
										<div>
											{% if app.user %}
												<form action="{{ path('comment_add', { creationId: creation.id }) }}" method="post" class="comment-form" id="comment-form-{{ creation.id }}">
													<textarea name="contentComment" class="form-control" rows="4" placeholder="Écrivez votre commentaire ici..." required></textarea>
													<button type="submit" class="btn btn-primary mt-3">Envoyer</button>
												</form>
											{% else %}
												<p class="text-muted">Connectez-vous pour commenter.</p>
											{% endif %}
										</div>

										<div id="comments-list-{{ creation.id }}">
											{% for comment in creation.comments|sort((a, b) => b.createdAt <=> a.createdAt) %}
												<div class="mb-3 p-3 border rounded" id="comment-{{ comment.id }}">
													<p>
														<strong>{{ comment.user ? comment.user.getPseudo : 'Anonyme' }}</strong>
														:</p>
													<p>{{ comment.contentComment }}</p>
													<p class="text-muted">Posté le
														{{ comment.createdAt|date('d/m/Y') }}</p>
													{% if comment.user == app.user %}
														<form action="{{ path('comment_delete', { id: comment.id }) }}" method="post" class="mt-2 delete-comment-form" data-comment-id="{{ comment.id }}">
															<input type="hidden" name="_token" value="{{ csrf_token('delete' ~ comment.id) }}">
															<button type="submit" class="btn btn-danger btn-sm">Supprimer</button>
														</form>
													{% endif %}
												</div>
											{% else %}
												<p>Aucun commentaire pour cette création.</p>
											{% endfor %}
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		{% endfor %}
	</div>
{% endblock %}
{% block javascripts %}
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js"></script>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
const grid = document.querySelector('.row');
const cols = grid.querySelectorAll('.col');

function arrangeGrid() {
const gridWidth = grid.offsetWidth;
const colWidth = cols[0].offsetWidth;
const colsCount = Math.floor(gridWidth / colWidth);

const colHeights = new Array(colsCount).fill(0);

cols.forEach(col => {
const minColHeight = Math.min(... colHeights);
const colIndex = colHeights.indexOf(minColHeight);

const x = colIndex * colWidth;
const y = minColHeight;

col.style.position = 'absolute';
col.style.left = `${x}px`;
col.style.top = `${y}px`;

colHeights[colIndex] += col.offsetHeight + 16;
});

grid.style.position = 'relative';
grid.style.height = `${
Math.max(... colHeights)
}px`;
}

arrangeGrid();
window.addEventListener('resize', arrangeGrid);

document.querySelectorAll('.delete-comment-form').forEach(form => {
form.addEventListener('submit', function (event) {
event.preventDefault();

if (!confirm('Êtes-vous sûr de vouloir supprimer ce commentaire ?')) {
return;
}

const commentId = form.dataset.commentId;
const url = form.action;

fetch(url, {
method: 'POST',
headers: {
'X-Requested-With': 'XMLHttpRequest',
'Content-Type': 'application/x-www-form-urlencoded'
},
body: new URLSearchParams(new FormData(form))
}).then(response => {
if (response.ok) {
const commentElement = document.querySelector (`[data-comment-id="${commentId}"]`).closest('.mb-3');
commentElement.remove();

alert('Le commentaire a été supprimé avec succès !');
} else {
console.error('Erreur lors de la suppression du commentaire.');
alert('Une erreur est survenue lors de la suppression du commentaire.');
}
}).catch(error => {
console.error('Erreur réseau :', error);
alert('Erreur réseau. Veuillez réessayer.');
});
});
});

function onClickBtnLike(event) {
event.preventDefault();
const url = this.href;
const spanCount = this.querySelector('span.js-likes');
const icone = this.querySelector('i');

axios.get(url).then(function (response) {
spanCount.textContent = response.data.likes;

if (icone.classList.contains('fas')) {
icone.classList.replace('fas', 'far');
} else {
icone.classList.replace('far', 'fas');
}
}).catch(function (error) {
if (error.response.status === 403) {
window.alert('Vous ne pouvez pas liker une création si vous n\'êtes pas connecté !');
} else {
window.alert("Une erreur s'est produite");
}
});
}

document.querySelectorAll('a.js-like').forEach(function (link) {
link.addEventListener('click', onClickBtnLike);
});

const shareIcons = document.querySelectorAll('.share-icon');
shareIcons.forEach(icon => {
icon.addEventListener('click', function (event) {
event.stopPropagation();

const relativeUrl = this.getAttribute('data-share-url');
const fullUrl = `${
window.location.origin
}${relativeUrl}`;

navigator.clipboard.writeText(fullUrl).then(() => {
const message = this.nextElementSibling;
message.classList.add('active');
setTimeout(() => message.classList.remove('active'), 2000);
}).catch(err => console.error('Erreur lors de la copie du lien :', err));
});
});

document.querySelectorAll('.modal').forEach(modal => {
modal.addEventListener('hidden.bs.modal', function () {
document.body.classList.remove('modal-open');
document.querySelector('.modal-backdrop') ?. remove();
});
});
});

document.addEventListener('DOMContentLoaded', function () {
const commentForms = document.querySelectorAll('.comment-form');

commentForms.forEach(form => {
form.addEventListener('submit', function (event) {
event.preventDefault();

const formData = new FormData(form);
const creationId = form.id.replace('comment-form-', '');

fetch(form.action, {
method: 'POST',
body: formData,
headers: {
'Accept': 'application/json'
}
}).then(response => response.json()).then(data => {
if (data.success) {
const commentsList = document.getElementById (`comments-list-${creationId}`);
const newComment = document.createElement('div');
newComment.classList.add('mb-3', 'p-3', 'border', 'rounded');
newComment.id = `comment-${
data.comment.id
}`;

let deleteButton = '';
if (data.comment.isUser) {
deleteButton = `
                            <form action="/comment/delete/${
data.comment.id
}" method="post" class="mt-2 delete-comment-form" data-comment-id="${
data.comment.id
}">
                                <input type="hidden" name="_token" value="${
data.comment.csrfToken
}">
                                <button type="submit" class="btn btn-danger btn-sm">Supprimer</button>
                            </form>
                        `;
}

newComment.innerHTML = `
                        <p><strong>${
data.comment.user
}</strong> :</p>
                        <p>${
data.comment.content
}</p>
                        <p class="text-muted">Posté le ${
data.comment.createdAt
}</p>
                        ${deleteButton}
                    `;
commentsList.insertBefore(newComment, commentsList.firstChild);
form.reset();

const deleteForm = newComment.querySelector('.delete-comment-form');
if (deleteForm) {
setupDeleteComment(deleteForm);
}
} else {
alert('Erreur : ' + data.error);
}
}).catch(error => {
console.error('Erreur:', error);
});
});
});

function setupDeleteComment(form) {
form.addEventListener('submit', function (event) {
event.preventDefault();

if (!confirm('Êtes-vous sûr de vouloir supprimer ce commentaire ?')) {
return;
}

const commentId = form.dataset.commentId;
const url = form.action;

fetch(url, {
method: 'POST',
headers: {
'X-Requested-With': 'XMLHttpRequest',
'Content-Type': 'application/x-www-form-urlencoded'
},
body: new URLSearchParams(new FormData(form))
}).then(response => {
if (response.ok) {
const commentElement = document.getElementById (`comment-${commentId}`);
commentElement.remove();

alert('Le commentaire a été supprimé avec succès !');
} else {
console.error('Erreur lors de la suppression du commentaire.');
alert('Une erreur est survenue lors de la suppression du commentaire.');
}
}).catch(error => {
console.error('Erreur réseau :', error);
alert('Erreur réseau. Veuillez réessayer.');
});
});
}

document.querySelectorAll('.delete-comment-form').forEach(form => {
setupDeleteComment(form);
});
});
	</script>

{% endblock %}
